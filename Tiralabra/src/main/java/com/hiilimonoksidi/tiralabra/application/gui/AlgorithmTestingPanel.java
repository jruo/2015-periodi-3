package com.hiilimonoksidi.tiralabra.application.gui;

import com.hiilimonoksidi.tiralabra.application.AlgorithmTester;
import com.hiilimonoksidi.tiralabra.application.StepController;
import com.hiilimonoksidi.tiralabra.graph.Graph;
import com.hiilimonoksidi.tiralabra.graph.Node;
import com.hiilimonoksidi.tiralabra.graph.Path;
import com.hiilimonoksidi.tiralabra.misc.GraphBuilder;
import com.hiilimonoksidi.tiralabra.misc.Point;
import com.hiilimonoksidi.tiralabra.pathfinding.PathfindingAlgorithm;
import java.awt.image.BufferedImage;
import javax.swing.DefaultListModel;

/**
 *
 * @author Janne Ruoho
 */
public class AlgorithmTestingPanel extends javax.swing.JPanel {

    private MainWindow mainWindow;
    private BufferedImage image;
    private Point start, end;
    private Graph graph;
    private int stepDelay;
    private PathfindingAlgorithm currentAlgorithm;

    public AlgorithmTestingPanel(MainWindow mainWindow, BufferedImage image, Point start, Point end) {
        initComponents();
        this.mainWindow = mainWindow;
        this.image = image;
        this.start = start;
        this.end = end;

        graph = GraphBuilder.createFromImage(image);

        jPanelAlgorithmTestingImageCanvas.setImage(image);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelResults = new javax.swing.JPanel();
        jScrollPaneResults = new javax.swing.JScrollPane();
        jTextAreaResults = new javax.swing.JTextArea();
        jPanelOptions = new javax.swing.JPanel();
        jLabelSelect = new javax.swing.JLabel();
        jScrollPaneAlgorithms = new javax.swing.JScrollPane();
        jListAlgorithms = new javax.swing.JList();
        jCheckBoxVisualize = new javax.swing.JCheckBox();
        jPanelButtons = new javax.swing.JPanel();
        jButtonStop = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jPanelSpeed = new javax.swing.JPanel();
        jSliderSpeed = new javax.swing.JSlider();
        jLabelSpeed = new javax.swing.JLabel();
        jPanelTime = new javax.swing.JPanel();
        jLabelTimeLimit = new javax.swing.JLabel();
        jTextFieldTimeLimit = new javax.swing.JTextField();
        jLabelSeconds = new javax.swing.JLabel();
        jPanelImage = new javax.swing.JPanel();
        jScrollPaneCanvas = new javax.swing.JScrollPane();
        jPanelCanvas = new javax.swing.JPanel();
        jPanelAlgorithmTestingImageCanvas = new com.hiilimonoksidi.tiralabra.application.gui.AlgorithmTestingImageCanvas();

        setLayout(new java.awt.BorderLayout());

        jPanelResults.setLayout(new java.awt.GridBagLayout());

        jScrollPaneResults.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneResults.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTextAreaResults.setEditable(false);
        jTextAreaResults.setColumns(20);
        jTextAreaResults.setRows(5);
        jScrollPaneResults.setViewportView(jTextAreaResults);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelResults.add(jScrollPaneResults, gridBagConstraints);

        add(jPanelResults, java.awt.BorderLayout.PAGE_END);

        jPanelOptions.setLayout(new java.awt.GridBagLayout());

        jLabelSelect.setText("Select algorithm:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanelOptions.add(jLabelSelect, gridBagConstraints);

        DefaultListModel<PathfindingAlgorithm.Type> listModel = new DefaultListModel<>();
        for (PathfindingAlgorithm.Type algo : PathfindingAlgorithm.Type.values()) {
            listModel.addElement(algo);
        }
        jListAlgorithms.setModel(listModel);
        jListAlgorithms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAlgorithms.setSelectedIndex(0);
        jScrollPaneAlgorithms.setViewportView(jListAlgorithms);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        jPanelOptions.add(jScrollPaneAlgorithms, gridBagConstraints);

        jCheckBoxVisualize.setText("Visualize (no timing)");
        jCheckBoxVisualize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxVisualizeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 15);
        jPanelOptions.add(jCheckBoxVisualize, gridBagConstraints);

        jPanelButtons.setLayout(new java.awt.GridBagLayout());

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanelButtons.add(jButtonStop, gridBagConstraints);

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelButtons.add(jButtonStart, gridBagConstraints);

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelButtons.add(jButtonExit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(9, 10, 10, 10);
        jPanelOptions.add(jPanelButtons, gridBagConstraints);

        jPanelSpeed.setLayout(new java.awt.GridBagLayout());

        jSliderSpeed.setEnabled(false);
        jSliderSpeed.setPreferredSize(new java.awt.Dimension(100, 23));
        jSliderSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSpeedStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelSpeed.add(jSliderSpeed, gridBagConstraints);

        jLabelSpeed.setText("Speed:");
        jLabelSpeed.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelSpeed.add(jLabelSpeed, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        jPanelOptions.add(jPanelSpeed, gridBagConstraints);

        jPanelTime.setLayout(new java.awt.GridBagLayout());

        jLabelTimeLimit.setText("Time limit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanelTime.add(jLabelTimeLimit, gridBagConstraints);

        jTextFieldTimeLimit.setColumns(5);
        jTextFieldTimeLimit.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanelTime.add(jTextFieldTimeLimit, gridBagConstraints);

        jLabelSeconds.setText("seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanelTime.add(jLabelSeconds, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        jPanelOptions.add(jPanelTime, gridBagConstraints);

        add(jPanelOptions, java.awt.BorderLayout.LINE_END);

        jPanelImage.setLayout(new java.awt.GridBagLayout());

        jPanelCanvas.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout jPanelAlgorithmTestingImageCanvasLayout = new javax.swing.GroupLayout(jPanelAlgorithmTestingImageCanvas);
        jPanelAlgorithmTestingImageCanvas.setLayout(jPanelAlgorithmTestingImageCanvasLayout);
        jPanelAlgorithmTestingImageCanvasLayout.setHorizontalGroup(
            jPanelAlgorithmTestingImageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanelAlgorithmTestingImageCanvasLayout.setVerticalGroup(
            jPanelAlgorithmTestingImageCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanelCanvas.add(jPanelAlgorithmTestingImageCanvas, new java.awt.GridBagConstraints());

        jScrollPaneCanvas.setViewportView(jPanelCanvas);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelImage.add(jScrollPaneCanvas, gridBagConstraints);

        add(jPanelImage, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxVisualizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxVisualizeStateChanged
        boolean visualize = jCheckBoxVisualize.isSelected();
        toggleVisualizerOptions(visualize);
    }//GEN-LAST:event_jCheckBoxVisualizeStateChanged

    private void toggleVisualizerOptions(boolean visualize) {
        jLabelSpeed.setEnabled(visualize);
        jSliderSpeed.setEnabled(visualize);
        jLabelTimeLimit.setEnabled(!visualize);
        jTextFieldTimeLimit.setEnabled(!visualize);
        jLabelSeconds.setEnabled(!visualize);
    }

    private void disableOptions() {
        jButtonStart.setEnabled(false);
        jCheckBoxVisualize.setEnabled(false);

        jLabelTimeLimit.setEnabled(false);
        jTextFieldTimeLimit.setEnabled(false);
        jLabelSeconds.setEnabled(false);
    }

    private void enableOptions() {
        jButtonStart.setEnabled(true);
        jCheckBoxVisualize.setEnabled(true);

        toggleVisualizerOptions(jCheckBoxVisualize.isSelected());
    }


    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        start();
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jSliderSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSpeedStateChanged
        updateStepDelay();
    }//GEN-LAST:event_jSliderSpeedStateChanged

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        stop();
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        stop();
        mainWindow.setPanel(new InputPanel(mainWindow));
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void stop() {
        if (currentAlgorithm != null) {
            currentAlgorithm.stop();
        }
    }

    private void updateStepDelay() {
        int val = jSliderSpeed.getValue();
        stepDelay = 1; // TODO: aika
    }

    private void start() {
        disableOptions();
        updateStepDelay();

        jPanelAlgorithmTestingImageCanvas.setPath(null);
        jPanelAlgorithmTestingImageCanvas.repaint();

        PathfindingAlgorithm.Type algorithm = getAlgorithm();
        currentAlgorithm = algorithm.getInstance();
        AlgorithmTester tester = new AlgorithmTester(currentAlgorithm, graph, start, end);

        tester.start(new StepController() {

            @Override
            public void setOpenNodes(Iterable<Node> open) {
                jPanelAlgorithmTestingImageCanvas.setOpenNodes(open);
                jPanelAlgorithmTestingImageCanvas.repaint();
            }

            @Override
            public void setClosedNodes(Iterable<Node> closed) {
                jPanelAlgorithmTestingImageCanvas.setClosedNodes(closed);
                jPanelAlgorithmTestingImageCanvas.repaint();
            }

            @Override
            public void setPath(Path path) {
                jPanelAlgorithmTestingImageCanvas.setPath(path);
                jPanelAlgorithmTestingImageCanvas.repaint();
                enableOptions();
            }

            @Override
            public int getDelay() {
                return stepDelay;
            }
        });
    }

    private PathfindingAlgorithm.Type getAlgorithm() {
        int selected = jListAlgorithms.getSelectedIndex();
        PathfindingAlgorithm.Type algorithm = PathfindingAlgorithm.Type.A_STAR;
        for (PathfindingAlgorithm.Type a : PathfindingAlgorithm.Type.values()) {
            if (selected-- == 0) {
                algorithm = a;
            }
        }
        return algorithm;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JCheckBox jCheckBoxVisualize;
    private javax.swing.JLabel jLabelSeconds;
    private javax.swing.JLabel jLabelSelect;
    private javax.swing.JLabel jLabelSpeed;
    private javax.swing.JLabel jLabelTimeLimit;
    private javax.swing.JList jListAlgorithms;
    private com.hiilimonoksidi.tiralabra.application.gui.AlgorithmTestingImageCanvas jPanelAlgorithmTestingImageCanvas;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelCanvas;
    private javax.swing.JPanel jPanelImage;
    private javax.swing.JPanel jPanelOptions;
    private javax.swing.JPanel jPanelResults;
    private javax.swing.JPanel jPanelSpeed;
    private javax.swing.JPanel jPanelTime;
    private javax.swing.JScrollPane jScrollPaneAlgorithms;
    private javax.swing.JScrollPane jScrollPaneCanvas;
    private javax.swing.JScrollPane jScrollPaneResults;
    private javax.swing.JSlider jSliderSpeed;
    private javax.swing.JTextArea jTextAreaResults;
    private javax.swing.JTextField jTextFieldTimeLimit;
    // End of variables declaration//GEN-END:variables
}
