package com.hiilimonoksidi.tiralabra.application.gui;

import com.hiilimonoksidi.tiralabra.misc.Point;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import javax.swing.SwingUtilities;

/**
 *
 * @author Janne Ruoho
 */
public class InputImageCanvas extends javax.swing.JPanel implements MouseListener {

    private BufferedImage image;
    private Point start, end;
    private ActionListener pointChangedListener;

    private Color startColor = new Color(0x0C7D0E);
    private Color endColor = new Color(0xAD1010);
    private int pointIndicatorSize = 5;

    public InputImageCanvas() {
        initComponents();
        addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    public void setPointChangedListener(ActionListener listener) {
        pointChangedListener = listener;
    }

    public BufferedImage getImage() {
        return image;
    }

    public Point getStart() {
        return start;
    }

    public Point getEnd() {
        return end;
    }

    public void setImage(BufferedImage image) {
        this.image = image;
        start = null;
        end = null;
        setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));
        revalidate();
    }

    @Override
    public void paintComponent(Graphics g) {
        if (image != null) {
            g.drawImage(image, 0, 0, null);

            if (start != null) {
                g.setColor(startColor);
                g.drawLine(start.x - pointIndicatorSize, start.y, start.x + pointIndicatorSize, start.y);
                g.drawLine(start.x, start.y - pointIndicatorSize, start.x, start.y + pointIndicatorSize);
            }
            if (end != null) {
                g.setColor(endColor);
                g.drawLine(end.x - pointIndicatorSize, end.y, end.x + pointIndicatorSize, end.y);
                g.drawLine(end.x, end.y - pointIndicatorSize, end.x, end.y + pointIndicatorSize);
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
            start = new Point(e.getPoint().x, e.getPoint().y);
            pointChangedListener.actionPerformed(null);
        } else if (SwingUtilities.isRightMouseButton(e)) {
            end = new Point(e.getPoint().x, e.getPoint().y);
            pointChangedListener.actionPerformed(null);
        }
        repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
