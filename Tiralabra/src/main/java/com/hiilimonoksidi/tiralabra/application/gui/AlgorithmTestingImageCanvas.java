package com.hiilimonoksidi.tiralabra.application.gui;

import com.hiilimonoksidi.tiralabra.graph.Node;
import com.hiilimonoksidi.tiralabra.graph.Path;
import com.hiilimonoksidi.tiralabra.misc.Point;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

/**
 *
 * @author Janne Ruoho
 */
public class AlgorithmTestingImageCanvas extends javax.swing.JPanel {

    private final Color closedColor = new Color(0x9BBF41);
    private final Color openColor = new Color(0x4154BF);
    private final Color pathColor = new Color(0xE31B1B);

    private BufferedImage image;
    private Iterable<Node> closed;
    private Iterable<Node> open;
    private Path path;

    public AlgorithmTestingImageCanvas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setImage(BufferedImage image) {
        this.image = image;
        setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));
        revalidate();
    }
    
    public void clear() {
        closed = null;
        open = null;
        path = null;
        repaint();
    }

    public void setClosedNodes(Iterable<Node> closed) {
        this.closed = closed;
    }

    public void setOpenNodes(Iterable<Node> open) {
        this.open = open;
    }

    public void setPath(Path path) {
        this.path = path;
    }

    @Override
    public void paintComponent(Graphics g) {
        if (image == null) {
            return;
        }
        
        g.setColor(Color.WHITE);
        g.drawImage(image, 0, 0, null);

        if (closed != null) {
            g.setColor(closedColor);
            for (Node c : closed) {
                g.drawLine(c.x, c.y, c.x, c.y);
            }
        }

        if (open != null) {
            g.setColor(openColor);
            for (Node o : open) {
                g.drawLine(o.x, o.y, o.x, o.y);
            }
        }
        
        if (path != null) {
            g.setColor(pathColor);
            for (Point p : path.getPoints()) {
                g.drawLine(p.x, p.y, p.x, p.y);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
