package com.hiilimonoksidi.tiralabra.application.gui;

import com.hiilimonoksidi.tiralabra.datastructures.HashSet;
import com.hiilimonoksidi.tiralabra.graph.Node;
import com.hiilimonoksidi.tiralabra.graph.Path;
import com.hiilimonoksidi.tiralabra.misc.Point;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;

/**
 * Piirtää gui:n testauspaneelissa kuvan ja reitinhaun visualisoinnin.
 *
 * @author Janne Ruoho
 */
public class AlgorithmTestingImageCanvas extends javax.swing.JPanel {

    private final Color closedColor = new Color(0x9BBF41);
    private final Color openColor = new Color(0x4154BF);
    private final Color pathColor = new Color(0xE31B1B);

    private BufferedImage canvasImage, originalImage;
    private Iterable<Node> closed;
    private Iterable<Node> open;
    private HashSet<Node> drawnClosed;
    private HashSet<Node> drawnOpen;
    private HashSet<Point> drawnPath;
    private Path path;

    private Graphics2D imageGraphics;
    private float zoom = 1;
    private boolean dirty = true;

    public AlgorithmTestingImageCanvas() {
        initComponents();
        drawnClosed = new HashSet<>();
        drawnOpen = new HashSet<>();
        drawnPath = new HashSet<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setImage(BufferedImage image) {
        originalImage = image;
        canvasImage = copyBufferedImage(image);
        setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));
        revalidate();
    }

    /**
     * Pyyhkii piirustukset.
     */
    public void clear() {
        closed = null;
        open = null;
        path = null;
        drawnClosed = new HashSet<>();
        drawnOpen = new HashSet<>();
        drawnPath = new HashSet<>();
        dirty = true;
        repaint();
    }

    public void setZoom(float zoom) {
        this.zoom = zoom;
        setPreferredSize(new Dimension((int) (canvasImage.getWidth() * zoom), (int) (canvasImage.getHeight() * zoom)));
        revalidate();
    }

    public void setClosedNodes(Iterable<Node> closed) {
        this.closed = closed;
    }

    public void setOpenNodes(Iterable<Node> open) {
        this.open = open;
    }

    public void setPath(Path path) {
        this.path = path;
    }

    @Override
    public void paintComponent(Graphics g) {
        if (canvasImage == null) {
            return;
        }

        imageGraphics = canvasImage.createGraphics();

        if (dirty) {
            imageGraphics.setColor(Color.WHITE);
            imageGraphics.drawImage(originalImage, 0, 0, null);
            dirty = false;
        }
        
        if (open != null) {
            imageGraphics.setColor(openColor);
            for (Node o : open) {
                if (!drawnOpen.contains(o)) {
                    imageGraphics.drawLine(o.x, o.y, o.x, o.y);
                    drawnOpen.add(o);
                }
            }
        }

        if (closed != null) {
            imageGraphics.setColor(closedColor);
            for (Node c : closed) {
                if (!drawnClosed.contains(c)) {
                    imageGraphics.drawLine(c.x, c.y, c.x, c.y);
                    drawnClosed.add(c);
                }
            }
        }

        if (path != null) {
            imageGraphics.setColor(pathColor);
            for (Point p : path.getPoints()) {
                if (!drawnPath.contains(p)) {
                    imageGraphics.drawLine(p.x, p.y, p.x, p.y);
                    drawnPath.add(p);
                }
            }
        }

        Graphics2D g2 = (Graphics2D) g;
        g2.scale(zoom, zoom);
        g2.drawImage(canvasImage, 0, 0, null);
    }

    /**
     * Kopioi kuvan.
     *
     * @param bufferedImage kopioitava
     * @return kopio
     */
    private BufferedImage copyBufferedImage(BufferedImage bufferedImage) {
        ColorModel cm = bufferedImage.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = bufferedImage.copyData(null);
        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
